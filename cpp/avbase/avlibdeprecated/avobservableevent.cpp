///////////////////////////////////////////////////////////////////////////////
//
// Package:   AVCOMMON - Avibit Common Libraries
// QT-Version: QT5
// Copyright: AviBit data processing GmbH, 2001-2010
//
// Module:    AVLIB - Avibit Library
//
///////////////////////////////////////////////////////////////////////////////

/*! \file
    \author  Andreas Schuller
    \author  QT4-PORT: Christian Muschick, c.muschick@avibit.com
    \brief   Implementation of AVObservableEvents
 */


// local includes
#include "avobservableevent.h"


///////////////////////////////////////////////////////////////////////////////

AVObservableEvent::AVObservableEvent()
    : m_type(Null)
{}

///////////////////////////////////////////////////////////////////////////////

AVObservableEvent::AVObservableEvent(Type type)
    : m_type(type), m_sender(0)
{}

///////////////////////////////////////////////////////////////////////////////

AVObservableEvent::AVObservableEvent(const AVObservableEvent& src)
    : m_type(src.m_type), m_sender(src.m_sender)
{}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

AVObservableEventMessageReceived::AVObservableEventMessageReceived()
    : AVObservableEvent(MessageReceived)
{}

///////////////////////////////////////////////////////////////////////////////

AVObservableEventMessageReceived::AVObservableEventMessageReceived(AVMsgRaw* msg)
    : AVObservableEvent(MessageReceived), m_raw_msg(msg)
{}

///////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////

AVObservableEventMessageReceived::AVObservableEventMessageReceived(
        const AVObservableEventMessageReceived& src)
    : AVObservableEvent(src),
      m_raw_msg(src.m_raw_msg)
{}

///////////////////////////////////////////////////////////////////////////////

AVObservableEventExecStandbyChange::AVObservableEventExecStandbyChange()
    : AVObservableEvent(ExecStandbyChange),
      m_new_state(Standby)
{}

///////////////////////////////////////////////////////////////////////////////

AVObservableEventExecStandbyChange::AVObservableEventExecStandbyChange(ExecState new_state)
    : AVObservableEvent(ExecStandbyChange), m_new_state(new_state)
{}

///////////////////////////////////////////////////////////////////////////////

// End of file
